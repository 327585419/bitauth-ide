  // TESTING:

    // TODO: figure out what the spacers should be for:

    console.log('testing:');
    const test = `OP_1
OP_IF
  <$(
    OP_0
    OP_IF
      OP_1
    OP_ELSE
      <$(
        OP_1
        OP_IF
          OP_1NEGATE
        OP_ELSE
          OP_1
        OP_ENDIF
        OP_1
        OP_ADD
      )>
    OP_ENDIF
  )>
OP_ENDIF
    `;

    // begin processing locking script

    const testParsed = parseBitAuthScript(test);
    console.log('test parsed:');
    console.dir(testParsed);
    if (testParsed.status === false) {
      // TODO: highlight error (show but dim previous evaluations?)
      return { editorMode };
    }
    const testCompiled = compileBitAuthScript(
      testParsed.value,
      tempResolveIdentifier
    );
    console.log('test compiled:');
    console.dir(testCompiled);
    const testCompileErrors = getCompileErrors(testCompiled);
    console.log('test compileErrors:');
    console.dir(testCompileErrors);
    if (testCompileErrors.length !== 0) {
      // TODO: display errors (show but dim previous evaluations?)
      return { editorMode };
    }

    const testReduction = reduceBitAuthScript(
      testCompiled,
      vm,
      createProgramStateGenerator()
    ) as ScriptReductionTraceContainerNode;
    console.log('test reduction:');
    console.dir(testReduction);

    const testSamples = extractEvaluationSamplesFromReductionTrace(
      testReduction
    );

    console.log('test Samples:');
    console.dir(testSamples);

    const testEvaluation = incrementallyEvaluateReductionTraceNodes(
      testReduction.source,
      vm,
      createProgramStateGenerator()
    );

    console.log('T evaluation:');
    console.dir(testEvaluation);

    const testResults = addSpacersToEvaluationSamples([
      ...testEvaluation.samples,
      ...(testSamples as any[])
    ]);

    console.log('test results:');
    console.dir(testResults);


/*

e = evaluation
C = executedConditional
s = skippedConditional

OP_1                         |             
OP_IF                        | C
  <$(                        | C e
    OP_0                     | C e  
    OP_IF                    | C e s   
      OP_1                   | C e s   
    OP_ELSE                  | C e C    
      <$(                    | C e C e 
        OP_1                 | C e C e    
        OP_IF                | C e C e C      
          OP_1NEGATE         | C e C e C              
        OP_ELSE              | C e C e s         
          OP_1               | C e C e s        
        OP_ENDIF             | C e C e          
        OP_1                 | C e C e      
        OP_ADD               | C e C e        
      )>                     | C e C  
    OP_ENDIF                 | C e      
  )>                         | C 
OP_ENDIF                     |    


tokens 0-17:
e = evaluation
+ = executedConditional
- = skippedConditional

0:  []
1:  [+]
2:  [+] (wrapper)
3:  [+ e]
4:  [+ e -]
5:  [+ e -]
6:  [+ e +]
7:  [+ e +] (wrapper)
8:  [+ e + e]
9:  [+ e + e +]
10: [+ e + e +]
11: [+ e + e -]
12: [+ e + e -]
13: [+ e + e]
14: [+ e + e]
15: [+ e + e]
16: [+ e]
17: []

TODO: after this, we need to handle lines where no sample ends (the first line of the wrappers). Since nothing ends there, we can assume they are empty lines after the opening of an evaluation, and we can create a faux sample with only the required spacers? 

answer: if a line is "empty" when we fill the array based on last-ending elements, we can see if a wrapper begins at that line, and then mark it with the previous lines spacers + an evaluation spacer

*/