// import template from './2-of-3-template.json';

import { trustedRecovery } from 'bitcoin-ts/build/main/lib/auth/templates/templates.spec.debug';
import { AuthenticationTemplate } from 'bitcoin-ts/build/main/lib/auth/templates/types';

export enum IDEMode {
  /**
   * the primary editing mode – view and edit all aspects of the authentication template
   */
  editor,
  /**
   * a live testing mode – manually create testnet transactions using the authentication template
   */
  wallet
}

export enum ProjectEditorMode {
  /**
   * View and edit an isolated script.
   */
  isolatedScript,
  /**
   * View and edit an isolated script and its associated tests.
   */
  isolatedScriptWithTest,
  /**
   * View and modify an unlocking and locking script pair.
   */
  scriptPair,
  /**
   * View and modify the setup of an entity.
   */
  entity
}

// TODO: define ValidAuthenticationTemplate
export const validateAuthenticationTemplate = (
  template: AuthenticationTemplate
) => {
  const allScriptIds = template.scripts.map(obj => obj.id);
  const unlockedBy = template.scripts.reduce(
    (lockingScripts, script) =>
      script.unlocks !== undefined
        ? {
            ...lockingScripts,
            [script.unlocks]: [
              ...(lockingScripts[script.unlocks] || []),
              script.id
            ]
          }
        : lockingScripts,
    {} as {
      [id: string]: string[];
    }
  );
  return {
    description: template.description || '',
    name: template.name || '',
    entities: template.entities.map(entity => ({
      description: entity.description || '',
      name: entity.name,
      id: entity.id,
      scripts: entity.scripts || allScriptIds.slice(),
      variables: entity.variables || []
    })),
    scripts: template.scripts.map(script => ({
      script: script.script,
      id: script.id,
      name:
        script.name ||
        script.id
          .toLowerCase()
          .split('_')
          .map(word => word[0].toUpperCase() + word.slice(1))
          .join(''),
      unlocks: script.unlocks || undefined,
      tests: script.tests || [],
      unlockedBy: unlockedBy[script.id] || undefined
    })),
    supported: template.supported,
    version: template.version
  };
};

const template = validateAuthenticationTemplate(trustedRecovery);

export enum ScriptType {
  isolated,
  unlocking,
  locking
}

const extractPattern = (string: string, pattern: RegExp) => {
  const result = pattern.exec(string);
  return result ? result[1] : false;
};

const extractRedeemScript = (lockingScript: string) =>
  extractPattern(
    lockingScript,
    /^\s*OP_HASH160\s*<\s*\$\(\s*<\s*([\s\S]*)\s>\s*OP_HASH160\s*\)\s*>\s*OP_EQUAL\s*$/
  );

const extractRedeemScriptHash = (unlocks: string, unlockingScript: string) =>
  extractPattern(
    unlockingScript,
    new RegExp(`^([\\s\\S]*\\S)\\s*<\\s*${unlocks}\\.redeem_script\\s*>\\s*$`)
  );

const interpolateRedeemScript = (redeemScript: string) =>
  `OP_HASH160 <$(<${redeemScript}> OP_HASH160)> OP_EQUAL`;

const appendRedeemScriptHash = (
  unlocks: string,
  strippedUnlockingScript: string
) => `${strippedUnlockingScript} <${unlocks}.redeem_script>`;

const extractP2sh = (
  lockingScriptId: string,
  lockingScript: string,
  unlockingScript: string
) => {
  const redeemScript = extractRedeemScript(lockingScript);
  const trimmedUnlock = extractRedeemScriptHash(
    lockingScriptId,
    unlockingScript
  );
  return redeemScript && trimmedUnlock
    ? { unlockingScript: trimmedUnlock, lockingScript: redeemScript }
    : false;
};

const scriptPairState = () => {
  const unlocking = template.scripts[3];
  const locking = template.scripts[1];
  const p2sh = extractP2sh(locking.id, locking.script, unlocking.script);
  return {
    unlockingScriptName: unlocking.name,
    lockingScriptName: locking.name,
    ...(p2sh
      ? { isP2sh: true, ...p2sh }
      : {
          isP2sh: false,
          unlockingScript: unlocking.script,
          lockingScript: locking.script
        })
  };
};

const sampleVariableValues = {
  'first.signature.all': new Uint8Array(70).fill(1),
  'trusted.signature.all': new Uint8Array(70).fill(2),
  block_time: new Uint8Array(4).fill(1),
  delay_seconds: new Uint8Array(4).fill(2),
  'first.public_key': new Uint8Array(32).fill(1),
  'second.public_key': new Uint8Array(32).fill(2),
  'trusted.public_key': new Uint8Array(32).fill(3)
};

const sampleVariableLookupTable = Object.entries(sampleVariableValues).reduce(
  (table, pair) => ({ ...table, [pair[1].toString()]: pair[0] }),
  {} as { [key: string]: string }
);

export enum EvaluationViewerSpacer {
  evaluation,
  flowControl
}

export enum EvaluationViewerHighlight {
  success
}

export const sampleScriptPairEvaluation = {
  lookupTable: sampleVariableLookupTable,
  unlockingEvaluation: [
    { state: { stack: [] } },
    { state: { stack: [Uint8Array.of()] } },
    {
      state: {
        stack: [Uint8Array.of(), sampleVariableValues['first.signature.all']]
      }
    },
    {
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          sampleVariableValues['trusted.signature.all']
        ]
      }
    },
    {
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          sampleVariableValues['trusted.signature.all'],
          Uint8Array.of(1)
        ]
      }
    }
  ],
  lockingEvaluation: [
    {
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          sampleVariableValues['trusted.signature.all'],
          Uint8Array.of(1)
        ]
      }
    },
    {
      spacers: [EvaluationViewerSpacer.flowControl],
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          sampleVariableValues['trusted.signature.all']
        ]
      }
    },
    {
      spacers: [
        EvaluationViewerSpacer.flowControl,
        EvaluationViewerSpacer.evaluation
      ],
      state: undefined
    },
    {
      spacers: [
        EvaluationViewerSpacer.flowControl,
        EvaluationViewerSpacer.evaluation
      ],
      state: {
        stack: [sampleVariableValues['block_time']]
      }
    },
    {
      spacers: [
        EvaluationViewerSpacer.flowControl,
        EvaluationViewerSpacer.evaluation
      ],
      state: {
        stack: [
          sampleVariableValues['block_time'],
          sampleVariableValues['delay_seconds']
        ]
      }
    },
    {
      spacers: [
        EvaluationViewerSpacer.flowControl,
        EvaluationViewerSpacer.evaluation
      ],
      state: {
        stack: [Uint8Array.from([64, 226, 1])]
      }
    },
    {
      spacers: [EvaluationViewerSpacer.flowControl],
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          sampleVariableValues['trusted.signature.all'],
          Uint8Array.from([64, 226, 1])
        ]
      }
    },
    {
      spacers: [EvaluationViewerSpacer.flowControl],
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          sampleVariableValues['trusted.signature.all']
        ]
      }
    },
    {
      spacers: [EvaluationViewerSpacer.flowControl],
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          sampleVariableValues['trusted.signature.all'],
          sampleVariableValues['trusted.public_key']
        ]
      }
    },
    {
      spacers: [EvaluationViewerSpacer.flowControl],
      state: {
        stack: [Uint8Array.of(), sampleVariableValues['first.signature.all']]
      }
    },
    {
      spacers: [EvaluationViewerSpacer.flowControl],
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          Uint8Array.of(1)
        ]
      }
    },
    {
      spacers: [EvaluationViewerSpacer.flowControl],
      state: undefined
    },
    {
      spacers: [EvaluationViewerSpacer.flowControl],
      state: undefined
    },
    {
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          Uint8Array.of(1)
        ]
      }
    },
    {
      state: {
        stack: [
          Uint8Array.of(),
          sampleVariableValues['first.signature.all'],
          Uint8Array.of(1),
          sampleVariableValues['first.public_key'],
          sampleVariableValues['second.public_key'],
          Uint8Array.of(2)
        ]
      }
    },
    {
      highlight: EvaluationViewerHighlight.success,
      state: {
        stack: [Uint8Array.of(1)]
      }
    }
  ]
};
export const sampleIsolatedScriptEvaluation = {
  setupEvaluation: [],
  scriptEvaluation: [],
  checkEvaluation: []
};

// Static, sample global state
export const sampleState = {
  explorer: {
    projectName: template.name,
    entities: template.entities
  },
  ideMode: IDEMode.editor,
  editor: {
    mode: ProjectEditorMode.scriptPair,
    pair: {
      editorState: scriptPairState(),
      evaluationState: sampleScriptPairEvaluation
    },
    isolated: {
      editorState: {
        test: undefined,
        script: template.scripts[0]
      },
      evaluationState: sampleIsolatedScriptEvaluation
    }
  },
  scriptTree: [
    { element: template.scripts[0] },
    {
      active: true,
      element: template.scripts[1],
      children: [
        { active: true, element: template.scripts[2] },
        { element: template.scripts[3] },
        { element: template.scripts[4] }
      ]
    }
  ]
};
